"""
<Program Name>
  pedometer.r2py

<Purpose>
  This is a script for walking step counter. Analysis of the sensor data 
  from accelerometer to detect the walking / running steps. Introducing
  pre-calibration stage, noise level threshold and moving average filter
  to accurate step detection for difference devices.

  *Note: the device must be stable for 1 second pre-calibration from beginning
"""




dy_import_module_symbols('moving_average.r2py')
dy_import_module_symbols('low_pass_filter.r2py')






# constants for pre-calibratino stage
PRE_LEARN_SAMPLE_NUMBER = 100
ZERO_INTERVAL = 0.25                  # Minimum time difference between each step in senconds
PEAK_INTERVAL = 0.5



# log coefficient after pre-calibration stage
def log_coefficient(gravity_constant, moving_rate, threshold):
	log("Pre calibration done!\n")
	log("Grvaity Constant:", gravity_constant, 
			"\nMoving Average Filter Window Sampling Number:", moving_rate, 
			"\nThreshold:", threshold, '\n')
	log("Please walk around\n")


# Peodmeter class, includes filtering raw data and step estimation
class Pedometer:
  def __init__(self, precalibration):
    self.gravity_constant = precalibration.get_gravity()
    self.moving_rate = precalibration.get_moving_rate()
    self.threshold = precalibration.get_threshold()

    # Initialize moving average filter and step detection
    self.maf = MovingAverageFilter(self.moving_rate, precalibration.time, 0.125)
    self.lpf = LowPassFilter(precalibration.time, 0.25)

    self.steptime = precalibration.time


    self.zerocount = 0
    self.lastmag = 0.0

    self.peakcount = 0
    self.peaktime = self.steptime
    self.maglist = []
    self.timelist = []
    self.max_mag = self.threshold
    self.max_time = self.peaktime
    self.flag = 1

    log_coefficient(gravity_constant, moving_rate, threshold)
    
    

    

  def detect_step(self,raw_acc, time, method=0):	

    # Non-gravity acceleration
    raw_mag = mag_acceleration(raw_acc) - self.gravity_constant

    # moving average filter
    maf_mag = self.maf.moving_average_filter(raw_mag, time)

    # linear phase low pass filter
    lpf_mag = self.lpf.low_pass_filter(raw_mag, time)

    
    # step detection
    if method == 1:
      return self._detect_peak(lpf_mag, time)
    else:
      return self._detect_zero(lpf_mag, time)
    # return self._detect_zero(lpf_mag, time) or self._detect_peak(lpf_mag, time)

 

  def get_stepcount(self):
    return (self.zerocount, self.peakcount) 



  # crossing noise level and actual step interval > minimum step interval
  def _detect_zero(self, data, time):
    stepped = False
    if self.lastmag <= self.threshold and data > self.threshold and \
        time - self.steptime > ZERO_INTERVAL:
      self.zerocount += 1
      self.steptime = time
      #log("Time:", time, "Step count:", self.zerocount, '\n')
      self.lastmag = data
      stepped = True

    return stepped

	
  # a moving window to capture the peak
  # will change to queue later
  def _detect_peak(self, data, time): 
    stepped = False
    self.maglist.append(data)
    self.timelist.append(time)

    if time - self.peaktime >= PEAK_INTERVAL * self.flag:
      for i in range(1, len(self.maglist)-1):
        if self.maglist[i-1] <= self.maglist[i] and self.maglist[i] > self.maglist[i+1] and \
            self.maglist[i] > self.max_mag:
	  self.max_mag = self.maglist[i]
          self.max_time = self.timelist[i]
	  self.flag = 0

      if self.flag:
        self.flag += 1
      else:
        self.flag = 1
	self.peakcount += 1
        stepped = True
        self.peaktime = time
        # self.last_max = self.max_mag
        self.max_mag = self.threshold
	# self.last_maxtime = self.maxtime
        self.maglist = []
	self.timelist = []
  
    return stepped

# -*- mode: python;-*-
