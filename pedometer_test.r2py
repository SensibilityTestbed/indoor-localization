# This is a temp test script

log("\n\n###################################\n")
log(" Welcome to the offline pedometer!\n\n")
log("Pre-calibration start, please wait...\n\n")



datakeys = ['time', 'xforce', 'yforce', 'zforce', 'pitch', 'roll', 'yaw', 'xmag', 'ymag', 'zmag']

def import_csv(filename):
  data = []
  fh = openfile(filename, False)
  fstr = fh.readat(None, 0)
  fstr = fstr[fstr.find('\n')+1:-1]
  for line in fstr.split('\n'):
    strdata = line.split(',')
    zipped = zip(datakeys, strdata)
    entry = {}
    for key, value in zipped:
      entry[key] = float(value)
    data.append(entry)
  return data


#dy_import_module_symbols('orientation_filter.r2py')
dy_import_module_symbols('stat_stream.r2py')
dy_import_module_symbols('precalibration.r2py')
dy_import_module_symbols('pedometer.r2py')

caldata = import_csv("sony_50hz_calibration.csv")

acc_stream = StatStream()
gyro_stream = StatStream()
magnet_stream = StatStream()


pre = PreCalibration(1, 0)
pre.acc_stats = acc_stream 
pre.gyro_stats = gyro_stream
pre.magnet_stats = magnet_stream 


for meas in caldata:
  mag = matrix_row_magnitude([meas['xforce'], meas['yforce'], meas['zforce']])
  pre.acc_stats.update(mag)
  pre.gyro_stats.update(matrix_row_magnitude([meas['pitch'], meas['roll'], meas['yaw']]))
  pre.magnet_stats.update(matrix_row_magnitude([meas['xmag'], meas['ymag'], meas['zmag']]))
  pre.mag_list.append(mag)


#compass = OrientationFilter(pre)


pre.start_time = caldata[0]['time'] * 10 ** -9
pre.time = caldata[-1]['time'] * 10 ** -9


data = import_csv("sony_50hz_trousers1.csv")
log("Pre-calibration down! The pre-learned coefficients shows as below:\n")
ped = Pedometer(pre, 175)


v = [0.0, 0.0, 1.0, 0.0]
start = getruntime()
for entry in data:
  #q = compass.get_orientation(entry)
  #log("q = ", q, '\n')
  #log("v = ", quaternion_rotate(q, v), '\n')
      
  if ped.detect_step(entry, entry['time'] * 10 ** -9, 1):
    pass
distance = ped.get_distance()
end = getruntime() - start
log("\nTotal runtime: ", end, '\n')

log("\nThe distance will be estimated from two different detection algorithms and two estimation algorithms.\n")
log("\nCrossing zero algorithm:\n  Distance estimation from average stride: ", distance['average_zero_distance'],"meters\n  distance estimation from dynamic stride: ", distance['sum_zero'],"meters\n")
log("\nPeak search algorithm:\n  Distance estimation from average stride: ", distance['average_peak_distance'],"meters\n  distance estimation from dynamic stride: ", distance['sum_peak'],"meters\n") 
log("\n\n     Thank you for your using!\n")
log("###################################\n")
