#sensorlib = dy_import_module("sensorlib.r2py")
dy_import_module_symbols('getsensor.r2py')
dy_import_module_symbols('ped_online.r2py')


HEIGHT = 175
SENSOR_SELECOTR = 1



log("\n\n###################################\n")
log(" Welcome to the online pedometer!\n\n")
log("Pre-calibration start, please wait...\n\n")




def pedometer_thread(ped):
  def func():
    start_time = getruntime()
    while getruntime() - start_time  < 60:
      time = getruntime()
      try:
        if ped.detect_step(get_sensors(), time, 1):
          pass
      except:
        stop_sensing()
    stop_sensing()
    distance = ped.get_distance()

    if ped.carrying_flag == 0:
      log("Carrying method: Unknown\n")
    elif ped.carrying_flag == 1:
      log("Carrying method: hold in hand\n")
    elif ped.carrying_flag == 2:
      log("Carrying method: put in trousers pocket\n")
    elif ped.carrying_flag == 3:
      log("Carrying method: put in coat pocket\n")
      
    log("\nThe distance will be estimated from two different detection algorithms and two estimation algorithms.\n")
    log("\nCrossing zero algorithm:\n  Distance estimation from average stride: ", distance['average_zero_distance'],"meters\n  distance estimation from dynamic stride: ", distance['sum_zero'],"meters\n")
    log("\nPeak search algorithm:\n  Distance estimation from average stride: ", distance['average_peak_distance'],"meters\n  distance estimation from dynamic stride: ", distance['sum_peak'],"meters\n") 
    log("\n\n     Thank you for your using!\n")
    log("###################################\n")


  return func





start_sensing(SENSOR_SELECOTR, 0)

pre = PreCalibration(SENSOR_SELECOTR, 100)
log("Pre-calibration down! The pre-learned coefficients shows as below:\n")
ped = Pedometer(pre,HEIGHT)

createthread(pedometer_thread(ped))
