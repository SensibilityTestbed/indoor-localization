"""
<Program Name>
  orientation_filter.r2py

<Purpose>
  This module implements the extended Kalman filter designed by Angelo Sabatini,
  as described in his 2006 IEEE paper "Quaternion-Based Extended Kalman Filter for
  Determining Orientation by Inertial and Magnetic Sensing." The filter is meant
  to reduce errors accumulated from integrating sensor biases when figuring
  the orientation of a device. 
  
  The orientation filter provided herein is intended to be used to locate / navigate 
  devices in environments where GPS is unavailable or imprecise, namely, indoors. 
"""


dy_import_module_symbols('extended_kalman.r2py')
dy_import_module_symbols('quaternion.r2py')
dy_import_module_symbols('matrix.r2py')
#dy_import_module_symbols('math.r2py')
dy_import_module_symbols('trig.r2py')

# Filter constants
GRAVITY = 9.81
GRAVITY_VECTOR = [[0.0], [0.0], [GRAVITY]]
MAX_COVAR = matrix_scale(matrix_identity(3), 9223372036854775807) 
NYQUIST_STEP_FREQ = 0.125
ROOT3 = 3 ** 0.5




class OrientationFilter(ExtendedKalmanFilter):
  def __init__(self, precalibration): 
    q = quaternion_from_gravity(precalibration.gravity_vector)
    self._gravity_bias = precalibration.acc_stats.mean - GRAVITY
    acc_bias = self._gravity_bias / ROOT3 
    #magnet_bias = (precalibration.magnet_stats.mean - precalibration._magnetic_intensity) / ROOT3
    magnet_bias = 8.332

    state = matrix_transpose([[q[0], q[1], q[2], q[3], acc_bias, acc_bias, acc_bias, magnet_bias, magnet_bias, -magnet_bias]])
    log("state =\n", state, '\n\n')

    error = matrix_identity(10)
    # Since the initial quaternion is derived from the acceleration (due
    # to gravity), the quaternion's error is equal to the measurment error
    # of the accelerometer, i.e. the accelerometer variance.
    #
    # Likewise, the error in the accelerometer bias is also its variance.
    error[:4] = matrix_scale(error[:7], precalibration.acc_stats.variance)
    # The error in the magnetometer bias is its variance.
    error[7:] = matrix_scale(error[7:], precalibration.magnet_stats.variance) 
    log("P0 =\n", error, "\n\n")

    ExtendedKalmanFilter.__init__(self, state, error)

    self._acc = [0.0] * 3
    self._magnet = [0.0] * 3

    rotation = quaternion_to_matrix(quaternion_inverse(q))
    self._magnetic_field = matrix_multiply(rotation, precalibration.magnetic_field)

    self._gyro_variance = precalibration.gyro_stats.variance  
    self._acc_variance = precalibration.acc_stats.variance
    self._magnet_variance = precalibration.magnet_stats.variance
    self._magnet_mean = matrix_column_magnitude(self._magnetic_field)
    
    self._window_length = int(NYQUIST_STEP_FREQ * precalibration.get_sample_rate())
    self._window = [0.0] * self._window_length
    self._window[0] = self._magnet_variance  
    self._window_size = 1
     


  def _normalize(self):
    self._state[:4] = matrix_scale(self._state[:4], 1.0 / matrix_column_magnitude(self._state[:4]))



  def _get_quaternion(self):
    return matrix_transpose(self._state[:4])[0] 



  # A "virtual" method that computes the system dynamics,
  # i.e. how the state transitions over time. 
  def _compute_transition_matrix(self, input_matrix):
    # Compute the matrix describing angular motion,
    # referred to as omega by the literature.
    # Note: a true control vector doesn't apply here,
    # so the gyroscope reading is used instead.
    pitch, roll, yaw = matrix_transpose(input_matrix)[0]
    transition_matrix = quaternion_differentiator(pitch, roll, yaw)
  
    # Integrate angular velocity in discrete time
    transition_matrix = matrix_exponential_skew_symmetric(matrix_scale(transition_matrix, self._timestep))  

    # SL4A version
    #transition_matrix = matrix_exponential_skew_symmetric(transition_matrix)  
    

    # Right now the transition matrix only accounts
    # for the quaternion (orientation), so it is 4x4.
    # However, the accelerometer and magnetometer biases
    # are also included in the state vector, so they must
    # also be accounted for in the transition matrix. Thus,
    # the transition matrix must be extended by a 6x6 (two
    # 3x3 matrices corresponding to the 3 axes of each bias) 
    # identity matrix. 

    # Extra columns in quaternion portion of the transition
    # matrix should all be zero.
    for row in transition_matrix:
      row.extend([0.0] * 6)

    # Last six rows of transition matrix apply to biases.
    last_six_rows = matrix_identity(6)
    for identity_row in last_six_rows:
      # First four columns are the quaternion portion,
      # so they should all be zero in the biases portion.
      bias_row = [0.0] * 4
      bias_row.extend(identity_row)
      transition_matrix.append(bias_row)

    log("transition =\n", transition_matrix, '\n\n')
    return transition_matrix


  
  # Override state transition to use magnetometer window variance
  def _compute_a_priori_state(self, transition_matrix):
    ExtendedKalmanFilter._compute_a_priori_state(self, transition_matrix)
    # Update the magnetometer variance
    # using new window estimate.
    magnet_bias = (self._magnet_mean - self._magnetic_intensity) / ROOT3 
    self._state[7][7] = magnet_bias
    self._state[8][8] = magnet_bias
    self._state[9][9] = -magnet_bias


  def _compute_process_covariance(self):
    q = self._get_quaternion()
    # Process noise, Q, is modeled as piecewise
    # white noise. Starting with the quaternion,
    # its process noise is modeled as:
    # Q = gamma * variance_gyro * gamma^T,
    # where gamma is the matrix describing the
    # the transition of the quaternion noise.
    gamma = [[-q[0], -q[1], -q[2]],
             [ q[3], -q[2],  q[1]],
             [ q[2],  q[3], -q[0]],
             [-q[1],  q[0],  q[3]]
    Q = matrix_multiply(gamma, matrix_scale(matrix_identity(3), self._gyro_variance))
    Q = matrix_scale(matrix_multiply(Q, matrix_transpose(gamma)), 0.25)

    # Q is currently 4x4, but needs to be
    # 10x10 to include accelerometer and
    # magnetometer bias vectors
    zeros = [0.0] * 6
    for row in Q:
      row.extend(zeros)

    # The bias vectors currently never change
    # in the state transition model. Thus, the
    # error is modeled using variances only.
    Q_bias = matrix_init(6, 10)
    Q_bias[2][6] = self._acc_variance
    Q_bias[5][9] = self._magnet_variance
    
    Q.extend(Q_bias)
    log("Q =\n", Q, '\n\n')
    return Q


    

  # A "virtual" method that computes the Jacobian matrix
  # used in computing the a posteriori.
  def _compute_jacobian_matrix(self):
    # The Jacobian is computed by taking the partial
    # derivative of the measurements with respect to
    # the state, evaluated at the a priori.
    #
    # The state vector is 10x1
    # and the measurement vector
    # is 6x1, so the Jacobian is 6x10
    jacobian = matrix_init(6, 10)
    
    # Partial derivative on right
    # 6x6 of Jacobian is Identity. 
    identity = matrix_identity(6)
  
    q = self._get_quaternion() 
    q_norm = matrix_row_magnitude(q)

    # Factored partial derivative of 
    # the acceleration with respect to 
    # each component of the state quaternion
    acc_partials = [[q[2], -q[3], q[0], -q[1]],
                    [q[3], q[2], q[1], q[0]], 
                    [-q[0], -q[1], q[2], q[3]]]
    # Unfactor before inserting into Jacobian
    acc_partials = matrix_scale(acc_partials, 2 * GRAVITY / q_norm)
    
    # Factored partial derivative of the magnetometer 
    # readings with respect to the state quaternion. 
    magnet_partials = [[[q[0], q[1], q[2]], [-q[1], q[0], -q[3]], [-q[2], q[3], q[0]], [q[3], q[2], -q[1]]], 
                       [[q[1], -q[0], q[3]], [q[0], q[1], q[2]], [-q[3], -q[2], q[1]], [-q[2], q[3], q[0]]], 
                       [[q[2], -q[3], -q[0]], [q[3], q[2], -q[1]], [q[0], q[1], q[2]], [q[1], -q[0], q[3]]]]
    # Each vector in magnet needs to be mutliplied by the scaled magnetic 
    # field vector before being inserted into the Jacobian. 
    scaled_field = matrix_scale(matrix_transpose(self._magnetic_field), 2.0 / q_norm)
    
    for row in range(3):
      # Fill top three Jacobian rows with
      # accelerometer and identity partials
      jacobian[row] = acc_partials[row] + identity[row]
      magnet_row = row + 3
      # Fill first four columns of bottom three 
      # Jacobian rows with magnetometer partials
      for col in range(4):
        jacobian[magnet_row][col] = matrix_dot_product([magnet_partials[row][col]], scaled_field)
      # Insert identity partials in remaining
      # columns of bottom three rows
      jacobian[magnet_row] = jacobian[magnet_row][:4] + identity[magnet_row] 

    log("jacobian =\n", jacobian, '\n\n')
    return jacobian



  # A "virtual" method that computes the
  # measurements we'd expect to see
  def _compute_expected_measurements(self):

    # Calculate rotations of gravitational and magnetic vectors
    rotation = quaternion_to_matrix(self._get_quaternion())
    g_rotated = matrix_multiply(rotation, GRAVITY_VECTOR)
    h_rotated = matrix_multiply(rotation, self._magnetic_field)

    # Add biases in state vector to combined rotations vector
    #expected = matrix_add(g_rotated + h_rotated, self._state[:6])
    expected = matrix_add(g_rotated, self._state[4:7]) + h_rotated
    log("expected =\n", expected, '\n\n')
    return expected



  # Adapts the measurement covariance depending on how
  # much the measurements can be trusted to produce an
  # accurate orientation.
  def _compute_measurement_covariance(self):
    acc_norm = matrix_row_magnitude(self._acc)
    
    # Is the phone only under the influence of gravity?
    if abs(acc_norm - GRAVITY - self._gravity_bias) <= self._acc_variance:
      # Trust accelerometer, use for orienting
      acc_covar = matrix_scale(matrix_identity(3), self._acc_variance)

    else:
      # Don't rely on accelerometer
      acc_covar = matrix_scale(MAX_COVAR, 1)
    
    magnet_covar = matrix_scale(matrix_identity(3), self._magnet_variance)

    zeros = [0.0, 0.0, 0.0]
    for row in range(3):
      acc_covar[row].extend(zeros)
      magnet_covar[row] = zeros + magnet_covar[row]

    return acc_covar + magnet_covar



  def _compute_magnetometer_variance(self):
    if self._window_size < self._window_length:
      self._window_size += 1

    magnitude = matrix_row_magnitude(self._magnet)
    self._window_sum += magnitude - self._window[-1]  
    self._magnet_mean = self._window_sum / self._window_size

    var_sum = 0.0
    for i in range(1, len(self._window)):
      self._window[i] = self._window[i-1]
      var_sum += (self._window[i] - window_mean) ** 2
    self._window[0] = magnitude 

    self._magnet_variance = var_sum / (self._window_size - 1)
    
 


  def get_orientation(self, sensor_data):
    """
    <Purpose>
      Filters a rotation (with respect to the initial orientation)
      from noisy sensor data. 

    <Arguments>
      sensor_data:
                A dict of gyroscope, accelerometer, and magnetometer 
                data obtained from SL4A. Must also include a 'time' 
                key giving the timestamp of sensor events.

    <Exceptions>
      None.

    <Side Effects>
      Updates the state vector and error covariance matrix if arguments are given.

    <Returns>
      A quaternion describing the rotation from the initial orientation
      to the current one.
    """
    # Split sensor data into input and measurements vectors.
    gyro_vector = [[sensor_data['pitch']], [sensor_data['roll']], [sensor_data['yaw']]]
    self._acc = [sensor_data['xforce'], sensor_data['yforce'], sensor_data['zforce']]
    self._magnet = [sensor_data['xmag'], sensor_data['ymag'], sensor_data['zmag']]
    measurements = matrix_transpose([self._acc + self._magnet])

    self._compute_magnetometer_variance()

    # run Kalman filter
    self._update(gyro_vector, measurements, sensor_data['time'])

    self._normalize()  
    rotation = quaternion_to_matrix(self._get_quaternion())
    self._magnetic_field = matrix_multiply(rotation, matrix_transpose([self._magnet]))

    log("q =\n", self._get_quaternion(), '\n\n=======================================================================\n\n')

    return self._get_quaternion()

# -*- mode: python;-*-
