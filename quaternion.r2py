"""
<Program name>
  quaternion.r2py

<Purpose>
  Provide functions for quaternion algebra.
"""

dy_import_module_symbols("matrix.r2py")
dy_import_module_symbols("trig.r2py")

GRAVITY = [0.0, 0.0, 1.0]

# Initializes a quaternion describing the rotation
# of the gravity vector from phone to world coordinates
def quaternion_from_gravity(acc):
  unit_acc = matrix_scale([acc], 1.0 / matrix_row_magnitude(acc))[0]
  q = matrix_vector_cross_product(unit_acc, GRAVITY)
  q = matrix_scale(q, ((1 - unit_acc[2]) / 2.0) / ((1 - unit_acc[2] ** 2) ** 0.5))
  return matrix_transpose(q)[0] + [(1 + unit_acc[2]) / 2.0]
  

# Multiplies two quaternions and returns the result
def quaternion_multiply(q1, q2):
  q = [0.0] * 4
  q[0] = q2[3]*q1[0] + q2[0]*q1[3] - q2[1]*q1[2] + q2[2]*q1[1]
  q[1] = q2[3]*q1[1] + q2[0]*q1[2] + q2[1]*q1[3] - q2[2]*q1[0]
  q[2] = q2[3]*q1[2] - q2[0]*q1[1] + q2[1]*q1[0] + q2[2]*q1[3]
  q[3] = q2[3]*q1[3] - q2[0]*q1[0] - q2[1]*q1[1] - q2[2]*q1[2]
  return q


def quaternion_inverse(q):
  magnitude_inverse = 1.0 / (matrix_row_magnitude(q) ** 2)
  return matrix_scale([q[:3]], -magnitude_inverse)[0] + [q[3] * magnitude_inverse]
  


def quaternion_rotate(q, v):
  rotation = quaternion_multiply(quaternion_multiply(q, v), quaternion_inverse(q))
  return matrix_scale([rotation], 1.0 / matrix_row_magnitude(rotation))[0]


# Builds a skew symmetric 
# matrix for axes or angles
def quaternion_skew_symmetric(x, y, z):
  return [[0, -z, y], [z, 0, -x], [-y, x, 0]]


# Builds a matrix that takes the derivative of a 
# quaternion when multiplied
def quaternion_differentiator(x, y, z):
  omega = quaternion_skew_symmetric(x, y, z)
  omega[0].append(x)
  omega[1].append(y)
  omega[2].append(z)
  omega.append([-x, -y, -z, 0])
  return matrix_scale(omega, 0.5)


# Computes the rotation matrix
# of a given quaternion
def quaternion_to_matrix(q):
  magnitude = matrix_row_magnitude(q)
  matrix = matrix_init(3, 3)
  matrix[0][0] = q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]
  matrix[0][1] = 2 * (q[0] * q[1] + q[2] * q[3])
  matrix[0][2] = 2 * (q[0] * q[2] - q[1] * q[3])
  matrix[1][0] = 2 * (q[0] * q[1] - q[2] * q[3])
  matrix[1][1] = -q[0] * q[0] + q[1] * q[1] - q[2] * q[2] + q[3] * q[3]
  matrix[1][2] = 2 * (q[1] * q[2] + q[0] * q[3])
  matrix[2][0] = 2 * (q[0] * q[2] + q[1] * q[3])
  matrix[2][1] = 2 * (q[1] * q[2] - q[0] * q[3])
  matrix[2][2] = -q[0] * q[0] - q[1] * q[1] + q[2] * q[2] + q[3] * q[3]
  return matrix_scale(matrix, 1.0 / magnitude)



# -*- mode: python;-*-
