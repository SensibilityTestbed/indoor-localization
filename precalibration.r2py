"""
<Program Name>
  pre_calibration.r2py

<Purpose>
  This is a script of pre calibration stage for better step estimation
  with different device. To get gravity constant, sampling rate and noise
  level from first 100 samples. 
"""


dy_import_module_symbols("matrix.r2py")
dy_import_module_symbols("stat_stream.r2py")
dy_import_module_symbols('getsensor.r2py')


class PreCalibration:
  def __init__(self, SENSOR_SELECOTR, samplenum):
    self.samplenum = samplenum
    self.mag_list = []
    self.start_time = 0
    self.time = 0
    self.average = 0.0
    self.gyro_stats = StatStream()
    self.magnet_stats = StatStream()
    self.acc_stats = StatStream()
    self.sensor = SENSOR_SELECOTR

    self.calibrate()
        

  # pre-calibration stage, initialize coefficient of filters and threshold of noise level 
  def calibrate(self):
    log("Welcome to pedometer!\nSystem pre calibration, please wait a while\n")

    while get_sensors() is None:
      sleep(0.1)

    self.start_time = getruntime()
    count = 0

    while count < self.samplenum:
      self.time = getruntime()
      try:
        raw_data = get_sensors()
        if 'time' not in raw_data:
          sleep(0.1)
          continue
      except Exception as e:
        sleep(0.1)
        continue

      mag = matrix_row_magnitude([raw_data['xforce'], raw_data['yforce'], raw_data['zforce']])
      self.mag_list.append(mag)
      
      if self.sensor == 1:
        self.acc_stats.update(mag)
        self.gyro_stats.update(matrix_row_magnitude([raw_data['roll'], raw_data['pitch'], raw_data['azimuth']]))
        self.magnet_stats.update(matrix_row_magnitude([raw_data['xMag'], raw_data['yMag'], raw_data['zMag']]))
      count += 1 




    # gravity constant estimated by mean of acceleration
  def get_gravity(self):
    sum_mag = 0.0
    length = len(self.mag_list)
    for i in range(0, length):
      sum_mag += self.mag_list[i]
    self.average = sum_mag/length
    log("\nGravity constant:", self.average, '\n')
    return self.average





  # moving average filter windows size estimaed by sampling rate
  # and minimum path interval
  def get_sample_rate(self):
    sample_rate = len(self.mag_list)/(self.time - self.start_time)
    log("\nSamplingrate:", sample_rate, '\n')
    return sample_rate 



  # threshold estimated by noise level, which based on max noise level 
  # and standard deviation of noise. std used to avoid some unexpected 
  # large value pulse which may cause unexpected threshold value
  # estimated noise pk-pk = std * 6~8
  def get_threshold(self):
    sum_variance = 0.0
    max_noise = self.mag_list[0]
    length = len(self.mag_list)
    for i in range(1, length):
      if max_noise < self.mag_list[i]:
        max_noise = self.mag_list[i]
        sum_variance = sum_variance + (self.mag_list[i]-self.average)**2
    max_noise = max_noise - self.average
    variance_mag = sum_variance/length
    std_mag = variance_mag**0.5
    if max_noise > std_mag * 8 and max_noise < std_mag * 16:
      threshold = (max_noise) * 2
    else:
      threshold = std_mag * 16
    log("\nThreshold:", threshold, '\n')
    return threshold



# -*- mode: python;-*-

